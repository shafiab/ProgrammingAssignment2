demo
clc
clear
rnor
rnorm
readlines("www.ucdavis.edu/~shafiab")
readlines("www.ucdavis.edu\~shafiab")
readlines("www.ucdavis.edu/~shafiab")
a
a<-available.packages()
head(rownames(a),3)
View(a)
clear
clear a
clc
library(ggplot2)
instal.packages(slidify)
install.packages(slidify)
install.packages(slidify)
install.packages("slidify")
install.packages("ggplot2")
install.packages("slidify")
library(ggplot2)
search()
ver
version
install.packages("devtools")
library(devtools)
find_rtools()
library(KernSmooth)
getwd()
x<-c(4,"a")
class(x)
x<-c(4,"a",T)
x<-c(4,"a",T)
class(x)
x<-(1,2,3)
x<-c(1,2,3)
y<-c(1,2,3)
rbind(x,y)
class(rbind(x,y))
library("swirl")
swirl()
swirl()
bye()
str(lappy)
str(lapply)
x<-list(rnorm(100), 1:100)
x
clc
lapply(x,mean)
x<-1:100
lapply(x,runif)
x<-1:4
lapply(x,runif)
lapply(1,runif)
lapply(4,runif)
lapply(1:4,runif)
x<-list(a=matrix(1:4,2,2),b=matrix(1:6,3,2))
x
lapply(x, function(col), col[,1])
lapply(x, function(col) col[,1])
lapply(x, function(col) col[1,])
sapply(x, function(col) col[1,])
x
str(apply)
x<-matrix(rnorm(200), 20, 10)
apply(x,2,mean)
apply(x,1,mean)
rowSum
rowSums
rowSums(x)
colSums(x)
colMeans(x)
rowMeans(x)
x<-matrix(rnorm(200),20,10)
apply(x,1,quantile, probs=c(0.25,0.75))
str(tapply)
str(gr)
str(gl)
?gl
f<-gl(3,10)
f
str(f)
f
x<-c(rnorm(10), runif(10), rnorm(10))
x
tapply(x,f,mean)
tapply(x,f,mean, simplify=F)
tapply(x,f,range)
str(split)
x
x<-c(rnorm(10), runif(10), rnorm(10))
f<-gl(3,10)
split(x,f)
lapply(split(x,f), mean)
tapply(x,f, mean)
library(datasets)
head(airquality)
str(airquality)
split(airquality, airquality$Month)
split(airquality, airquality["Month"])
s<-split(airquality, airquality["Month"])
lapply(s, function(x) colMeans(x[,c("
Ozone")]))
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R")]))
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R")], na.rm=T))
x<-rnorm(10)
f1<-gl(2,5)
f1
f2<-gl(5,2)
f2
interaction(f1,f2)
noise<-function(n,mean,sd)
{}
noise<-function(n,mean,sd){rnorm(n,mean,sd)}
noise(5,1,2)
noise(1:5,1:5,2)
mapply(noise,1:5,1:5,2)
setwd("~/GitHub/ProgrammingAssignment2/.git")
wordwd()
getwd()
setwd("~/GitHub/ProgrammingAssignment2")
source("cachematrix.R")
d=rbind(c(1, -1/4), c(-1/4, 1))
xx<-makeCacheMatrix(d)
cacheSolve(xx)
x$xInv
xx$xInv
xx
xx
dim(matrix(nrow=0,ncol=0))
x$getInverse
xx$getInverse
aa<-xx$getInverse
aa<-xx[[getInverse]]
aa<-xx[["getInverse"]]
aa
aa
source("cachematrix.R")
makeCacheMatrix(d)
x<-makeCacheMatrix(d)
cacheSolve(x)
source("cachematrix.R")
xx<-makeCacheMatrix(d)
cacheSolve(xx)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) {m <<- mean}
getmean <- function() {m}
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
y<-makeVector(c(1:100))
y$get
y["get"]
y[["get"]]
y$x
y
names(y)
str(y)
xx
xx$setMatrix(d)
xx$setMatrix(d)
source("cachematrix.R")
source("cachematrix.R")
x<-makeCacheMatrix(d)
x$setMatrix(d)
source("cachematrix.R")
x<-makeCacheMatrix(d)
x$setMatrix(d)
x$getInverse
x$getInverse()
x$getInverse()
dim(x$getInverse())
source("cachematrix.R")
x<-makeCacheMatrix(d)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
source("cachematrix.R")
x<-makeCacheMatrix(d)
cacheSolve(x)
cacheSolve(x)
source("cachematrix.R")
x<-makeCacheMatrix(d)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
x$setMatrix(d)
cacheSolve(x)
source("cachematrix.R")
x<-makeCacheMatrix(d)
cacheSolve(x)
cacheSolve(x)
x$setMatrix(d)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
